# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

import benchmark_pb2 as benchmark__pb2


class MyRPC1Stub(object):
    """package my_rpc_service; 

    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Test1 = channel.unary_unary(
                '/MyRPC1/Test1',
                request_serializer=benchmark__pb2.Benchmark.SerializeToString,
                response_deserializer=benchmark__pb2.Response.FromString,
                )


class MyRPC1Servicer(object):
    """package my_rpc_service; 

    """

    def Test1(self, request, context):
        """functia Test
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_MyRPC1Servicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Test1': grpc.unary_unary_rpc_method_handler(
                    servicer.Test1,
                    request_deserializer=benchmark__pb2.Benchmark.FromString,
                    response_serializer=benchmark__pb2.Response.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'MyRPC1', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class MyRPC1(object):
    """package my_rpc_service; 

    """

    @staticmethod
    def Test1(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/MyRPC1/Test1',
            benchmark__pb2.Benchmark.SerializeToString,
            benchmark__pb2.Response.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)
